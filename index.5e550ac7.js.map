{"mappings":"I,E,E,E,E,E,C,E,E,C,E,O,E,C,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,G,iB,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,gB,C,I,W,O,C,E,I,K,E,W,C,E,a,C,C,G,I,E,E,SCGA,IAAI,EAAO,EACP,EAAoB,EACpB,EAAa,EAAE,CACf,EAAS,EAAE,CACT,EAAkB,SAAS,cAAc,CAAC,UAahD,eAAe,EAAU,EAAO,CAAC,EAE/B,EADoB,MAAM,AAAA,CAAA,EAAA,EAAA,SAAQ,AAAR,IAG1B,IAAM,EAAY,MAAM,AAAA,CAAA,EAAA,EAAA,oBAAmB,AAAnB,EAAqB,GAC7C,EAAa,EAAW,MAAM,CAAC,EAAU,OAAO,EAChD,AA4BF,WACE,IAAM,EA1CN,AAAI,AADgB,OAAO,UAAU,CACnB,IACT,EAEA,EAyCT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAe,IACjC,GAAI,EAAoB,EAAW,MAAM,CAAE,CACzC,IAAM,EAAQ,CAAU,CAAC,EAAkB,CACrC,EAAa,EAAc,EAAM,SAAS,EAE1C,EAAY,SAAS,aAAa,CAAC,OACzC,EAAU,SAAS,CAAC,GAAG,CAAC,cAExB,EAAU,SAAS,CAAG;AACqB,iDAAA,EAAE,EAAM,WAAW,CAAC,OAAO,EACpE,EAAM,KAAK,CACZ;A;AAE2B,kCAAA,EAAE,EAAM,KAAK,CAAC;AACnC,aAAA,EAAE,EAAW,GAAG,EAAE,EAAM,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;AACnC,6BAAA,EAAE,AAhC/B,SAAkB,CAAI,EACpB,IAAM,EAAY,KAAK,KAAK,CAAC,EAAO,GAChC,EAAQ,GACZ,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACjB,EAAI,EACN,GAAS,UAET,GAAS,UAGb,OAAO,CACT,EAqBwC,EAAM,YAAY,EAAE;A;AAEtD,MAAA,CAAC,CAED,EAAgB,WAAW,CAAC,GAC5B,GACF,KAAO,CAGL,IAAU,GACV,KACF,CAEJ,GA1DA,CAGO,SAAS,EAAc,CAAQ,EACpC,OAAO,EACJ,GAAG,CAAC,AAAA,IACH,IAAM,EAAQ,EAAO,IAAI,CAAC,AAAA,GAAK,EAAE,EAAE,GAAK,GACxC,OAAO,EAAQ,EAAM,IAAI,CAAG,kBAC9B,GACC,KAAK,CAAC,EAAG,GACT,IAAI,CAAC,KACV,CAkDA,AAhFuB,SAAS,cAAc,CAAC,aAgFhC,gBAAgB,CAAC,QAAS,KAEvC,IAAU,EACZ,GAGA,EAAU,E,G,E","sources":["<anon>","src/partials_js/weekly_trends.js"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"dxW8t\", function(module, exports) {\n\n$parcel$export(module.exports, \"getGenreNames\", function () { return $9dcb73f6d6238453$export$c30aae9ef29dd78e; });\n\nvar $fpMk3 = parcelRequire(\"fpMk3\");\nlet $9dcb73f6d6238453$var$page = 1;\nlet $9dcb73f6d6238453$var$currentMovieIndex = 0; // Index aktualnie wyświetlanego filmu\nlet $9dcb73f6d6238453$var$moviesList = []; // Lista przechowująca pobrane filmy\nlet $9dcb73f6d6238453$var$genres = []; // Lista przechowująca pobrane gatunki\nconst $9dcb73f6d6238453$var$moviesContainer = document.getElementById(\"movies\");\nconst $9dcb73f6d6238453$var$loadMoreButton = document.getElementById(\"load-more\");\n// Funkcja do pobierania liczby filmów na podstawie szerokości ekranu\nfunction $9dcb73f6d6238453$var$getMoviesPerLoad() {\n    const screenWidth = window.innerWidth;\n    if (screenWidth < 768) return 1; // Wyświetl 1 film na urządzeniach mobilnych\n    else return 3; // Wyświetl 3 filmy na tabletach i laptopach\n}\nasync function $9dcb73f6d6238453$var$getMovies(page = 1) {\n    const fetchGenres = await (0, $fpMk3.getGenres)();\n    $9dcb73f6d6238453$var$genres = fetchGenres;\n    const fetchData = await (0, $fpMk3.getPopularMoviesWeek)(page);\n    $9dcb73f6d6238453$var$moviesList = $9dcb73f6d6238453$var$moviesList.concat(fetchData.results); // Dodaj filmy do listy\n    $9dcb73f6d6238453$var$displayMovies(); // Wyświetl filmy z nowo pobranych\n}\nfunction $9dcb73f6d6238453$export$c30aae9ef29dd78e(genreIds) {\n    return genreIds.map((id)=>{\n        const genre = $9dcb73f6d6238453$var$genres.find((g)=>g.id === id);\n        return genre ? genre.name : \"Nieznany gatunek\";\n    }).slice(0, 2) // Ogranicz do dwóch gatunków\n    .join(\", \");\n}\nfunction $9dcb73f6d6238453$var$getStars(vote) {\n    const fullStars = Math.floor(vote / 2);\n    let stars = \"\";\n    for(let i = 0; i < 5; i++)if (i < fullStars) stars += \"&#9733;\"; // Pełna gwiazdka\n    else stars += \"&#9734;\"; // Pusta gwiazdka\n    return stars;\n}\n// Funkcja do wyświetlania filmów\nfunction $9dcb73f6d6238453$var$displayMovies() {\n    const moviesPerLoad = $9dcb73f6d6238453$var$getMoviesPerLoad(); // Pobierz liczbę filmów do załadowania\n    for(let i = 0; i < moviesPerLoad; i++)if ($9dcb73f6d6238453$var$currentMovieIndex < $9dcb73f6d6238453$var$moviesList.length) {\n        const movie = $9dcb73f6d6238453$var$moviesList[$9dcb73f6d6238453$var$currentMovieIndex]; // Pobierz aktualny film\n        const genreNames = $9dcb73f6d6238453$export$c30aae9ef29dd78e(movie.genre_ids); // Pobierz nazwy gatunków dla filmu\n        const movieCard = document.createElement(\"div\");\n        movieCard.classList.add(\"movie-card\");\n        movieCard.innerHTML = `\n        <img src=\"https://image.tmdb.org/t/p/w500${movie.poster_path}\" alt=\"${movie.title}\">\n        <div class=\"movie-info\">\n          <h2 class=\"movie-title\">${movie.title}</h2> \n          <p>${genreNames} | ${movie.release_date.split(\"-\")[0]}</p>\n          <div class=\"stars\">${$9dcb73f6d6238453$var$getStars(movie.vote_average)}</div>\n        </div>\n      `;\n        $9dcb73f6d6238453$var$moviesContainer.appendChild(movieCard);\n        $9dcb73f6d6238453$var$currentMovieIndex++; // Zwiększ indeks filmu\n    } else {\n        // Jeśli filmy się skończą, załaduj kolejną stronę\n        $9dcb73f6d6238453$var$page++;\n        $9dcb73f6d6238453$var$getMovies($9dcb73f6d6238453$var$page);\n        break; // Zakończ pętlę, aby czekać na załadowanie nowych filmów\n    }\n}\n// Obsługa przycisku \"Załaduj więcej\"\n$9dcb73f6d6238453$var$loadMoreButton.addEventListener(\"click\", ()=>{\n    $9dcb73f6d6238453$var$page++;\n    $9dcb73f6d6238453$var$getMovies($9dcb73f6d6238453$var$page);\n});\n// Najpierw pobierz listę gatunków, a potem filmy\n$9dcb73f6d6238453$var$getMovies($9dcb73f6d6238453$var$page);\nlet $9dcb73f6d6238453$var$moviesLoaded = false;\nfunction $9dcb73f6d6238453$var$loadMoreMovies() {\n    if (!$9dcb73f6d6238453$var$moviesLoaded) {\n        // Symulacja ładowania filmów (w rzeczywistości tu może być API)\n        const newMovies = [\n            {\n                title: \"Movie 4\",\n                year: 2023\n            },\n            {\n                title: \"Movie 5\",\n                year: 2023\n            },\n            {\n                title: \"Movie 6\",\n                year: 2023\n            }\n        ];\n        const movieList = document.getElementById(\"movies\");\n        newMovies.forEach((movie)=>{\n            const movieCard = document.createElement(\"div\");\n            movieCard.classList.add(\"movie-card\");\n            movieCard.innerHTML = `\n        <h3>${movie.title}</h3>\n        <p>${movie.year}</p>\n      `;\n            movieList.insertBefore(movieCard, document.getElementById(\"load more\")); // Wstaw przed przyciskiem\n        });\n        // Zaznacz, że załadowano filmy, aby zapobiec wielokrotnemu ładowaniu\n        $9dcb73f6d6238453$var$moviesLoaded = true;\n        // Możesz ukryć przycisk See All, jeśli nie chcesz go pokazywać po załadowaniu\n        document.getElementById(\"load more\").style.display = \"none\";\n    }\n}\n\n});\n\n\nparcelRequire(\"dxW8t\");\n})();\n//# sourceMappingURL=index.5e550ac7.js.map\n","import { getGenres } from './api';\nimport { getPopularMoviesWeek } from './api';\n\nlet page = 1;\nlet currentMovieIndex = 0; // Index aktualnie wyświetlanego filmu\nlet moviesList = []; // Lista przechowująca pobrane filmy\nlet genres = []; // Lista przechowująca pobrane gatunki\nconst moviesContainer = document.getElementById('movies');\nconst loadMoreButton = document.getElementById('load-more');\n\n// Funkcja do pobierania liczby filmów na podstawie szerokości ekranu\nfunction getMoviesPerLoad() {\n  const screenWidth = window.innerWidth;\n  if (screenWidth < 768) {\n    return 1; // Wyświetl 1 film na urządzeniach mobilnych\n  } else {\n    return 3; // Wyświetl 3 filmy na tabletach i laptopach\n  }\n}\n\nasync function getMovies(page = 1) {\n  const fetchGenres = await getGenres();\n  genres = fetchGenres;\n\n  const fetchData = await getPopularMoviesWeek(page);\n  moviesList = moviesList.concat(fetchData.results); // Dodaj filmy do listy\n  displayMovies(); // Wyświetl filmy z nowo pobranych\n}\n\n// Funkcja do dopasowania gatunków do filmów\nexport function getGenreNames(genreIds) {\n  return genreIds\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : 'Nieznany gatunek';\n    })\n    .slice(0, 2) // Ogranicz do dwóch gatunków\n    .join(', ');\n}\n\nfunction getStars(vote) {\n  const fullStars = Math.floor(vote / 2);\n  let stars = '';\n  for (let i = 0; i < 5; i++) {\n    if (i < fullStars) {\n      stars += '&#9733;'; // Pełna gwiazdka\n    } else {\n      stars += '&#9734;'; // Pusta gwiazdka\n    }\n  }\n  return stars;\n}\n\n// Funkcja do wyświetlania filmów\nfunction displayMovies() {\n  const moviesPerLoad = getMoviesPerLoad(); // Pobierz liczbę filmów do załadowania\n\n  for (let i = 0; i < moviesPerLoad; i++) {\n    if (currentMovieIndex < moviesList.length) {\n      const movie = moviesList[currentMovieIndex]; // Pobierz aktualny film\n      const genreNames = getGenreNames(movie.genre_ids); // Pobierz nazwy gatunków dla filmu\n\n      const movieCard = document.createElement('div');\n      movieCard.classList.add('movie-card');\n\n      movieCard.innerHTML = `\n        <img src=\"https://image.tmdb.org/t/p/w500${movie.poster_path}\" alt=\"${\n        movie.title\n      }\">\n        <div class=\"movie-info\">\n          <h2 class=\"movie-title\">${movie.title}</h2> \n          <p>${genreNames} | ${movie.release_date.split('-')[0]}</p>\n          <div class=\"stars\">${getStars(movie.vote_average)}</div>\n        </div>\n      `;\n\n      moviesContainer.appendChild(movieCard);\n      currentMovieIndex++; // Zwiększ indeks filmu\n    } else {\n      // Jeśli filmy się skończą, załaduj kolejną stronę\n      page++;\n      getMovies(page);\n      break; // Zakończ pętlę, aby czekać na załadowanie nowych filmów\n    }\n  }\n}\n\n// Obsługa przycisku \"Załaduj więcej\"\nloadMoreButton.addEventListener('click', () => {\n  page++;\n  getMovies(page);\n});\n\n// Najpierw pobierz listę gatunków, a potem filmy\ngetMovies(page);\n\nlet moviesLoaded = false;\n\nfunction loadMoreMovies() {\n  if (!moviesLoaded) {\n    // Symulacja ładowania filmów (w rzeczywistości tu może być API)\n    const newMovies = [\n      { title: 'Movie 4', year: 2023 },\n      { title: 'Movie 5', year: 2023 },\n      { title: 'Movie 6', year: 2023 },\n    ];\n\n    const movieList = document.getElementById('movies');\n\n    newMovies.forEach(movie => {\n      const movieCard = document.createElement('div');\n      movieCard.classList.add('movie-card');\n      movieCard.innerHTML = `\n        <h3>${movie.title}</h3>\n        <p>${movie.year}</p>\n      `;\n      movieList.insertBefore(movieCard, document.getElementById('load more')); // Wstaw przed przyciskiem\n    });\n\n    // Zaznacz, że załadowano filmy, aby zapobiec wielokrotnemu ładowaniu\n    moviesLoaded = true;\n\n    // Możesz ukryć przycisk See All, jeśli nie chcesz go pokazywać po załadowaniu\n    document.getElementById('load more').style.display = 'none';\n  }\n}\n"],"names":["$parcel$global","$parcel$modules","$parcel$inits","parcelRequire","globalThis","self","window","global","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$9dcb73f6d6238453$export$c30aae9ef29dd78e","set","s","enumerable","configurable","$fpMk3","$9dcb73f6d6238453$var$page","$9dcb73f6d6238453$var$currentMovieIndex","$9dcb73f6d6238453$var$moviesList","$9dcb73f6d6238453$var$genres","$9dcb73f6d6238453$var$moviesContainer","document","getElementById","$9dcb73f6d6238453$var$getMovies","page","getGenres","fetchData","getPopularMoviesWeek","concat","results","$9dcb73f6d6238453$var$displayMovies","moviesPerLoad","screenWidth","innerWidth","i","length","movie","genreNames","genre_ids","movieCard","createElement","classList","add","innerHTML","poster_path","title","release_date","split","$9dcb73f6d6238453$var$getStars","vote","fullStars","Math","floor","stars","vote_average","appendChild","genreIds","map","genre","find","g","name","slice","join","$9dcb73f6d6238453$var$loadMoreButton","addEventListener"],"version":3,"file":"index.5e550ac7.js.map"}